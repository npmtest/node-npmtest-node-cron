{"/home/travis/build/npmtest/node-npmtest-node-cron/test.js":"/* istanbul instrument in package npmtest_node_cron */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-cron/lib.npmtest_node_cron.js":"/* istanbul instrument in package npmtest_node_cron */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_cron = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_cron = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-cron/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-cron && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_cron */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_cron\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_cron.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_node_cron.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_cron.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_node_cron.__dirname + '/lib.npmtest_node_cron.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-cron/node_modules/node-cron/src/node-cron.js":"'use strict';\n\nvar Task = require('./task'),\n  ScheduledTask = require('./scheduled-task');\n\nmodule.exports = (function() {\n\n  /**\n   * Creates a new task to execute given function when the cron\n   *  expression ticks.\n   *\n   * @param {string} expression - cron expression.\n   * @param {Function} func - task to be executed.\n   * @param {boolean} immediateStart - whether to start the task immediately.\n   * @returns {ScheduledTask} update function.\n   */\n  function createTask(expression, func, immediateStart) {\n    var task = new Task(expression, func);\n\n    return new ScheduledTask(task, immediateStart);\n  }\n\n  return {\n    schedule: createTask\n  };\n}());\n","/home/travis/build/npmtest/node-npmtest-node-cron/node_modules/node-cron/src/task.js":"'use strict';\n\nvar convertExpression = require('./convert-expression');\nvar validatePattern = require('./pattern-validation');\n\nmodule.exports = (function(){\n  function matchPattern(pattern, value){\n    if( pattern.indexOf(',') !== -1 ){\n      var patterns = pattern.split(',');\n      return patterns.indexOf(value.toString()) !== -1;\n    }\n    return pattern === value.toString();\n  }\n\n  function mustRun(task, date){\n    var runInSecond = matchPattern(task.expressions[0], date.getSeconds());\n    var runOnMinute = matchPattern(task.expressions[1], date.getMinutes());\n    var runOnHour = matchPattern(task.expressions[2], date.getHours());\n    var runOnDayOfMonth = matchPattern(task.expressions[3], date.getDate());\n    var runOnMonth = matchPattern(task.expressions[4], date.getMonth() + 1);\n    var runOnDayOfWeek = matchPattern(task.expressions[5], date.getDay());\n\n    var runOnDay = false;\n    var delta = task.initialPattern.length === 6 ? 0 : -1;\n\n    if (task.initialPattern[3 + delta] === '*') {\n      runOnDay = runOnDayOfWeek;\n    } else if (task.initialPattern[5 + delta] === '*') {\n      runOnDay = runOnDayOfMonth;\n    } else {\n      runOnDay = runOnDayOfMonth || runOnDayOfWeek;\n    }\n\n    return runInSecond && runOnMinute && runOnHour && runOnDay && runOnMonth;\n  }\n\n  function Task(pattern, execution){\n    validatePattern(pattern);\n    this.initialPattern = pattern.split(' ');\n    this.pattern = convertExpression(pattern);\n    this.execution = execution;\n    this.expressions = this.pattern.split(' ');\n  }\n\n  Task.prototype.update = function(date){\n    if(mustRun(this, date)){\n      try {\n        this.execution();\n      } catch(err) {\n        console.error(err);\n      }\n    }\n  };\n\n  return Task;\n}());\n","/home/travis/build/npmtest/node-npmtest-node-cron/node_modules/node-cron/src/convert-expression/index.js":"'use strict';\n\nvar monthNamesConversion = require('./month-names-conversion');\nvar weekDayNamesConversion = require('./week-day-names-conversion');\nvar convertAsterisksToRanges = require('./asterisk-to-range-conversion');\nvar convertRanges = require('./range-conversion');\nvar convertSteps = require('./step-values-conversion');\n\nmodule.exports = (function() {\n\n  function appendSeccondExpression(expressions){\n    if(expressions.length === 5){\n      return ['0'].concat(expressions);\n    }\n    return expressions;\n  }\n\n  /*\n   * The node-cron core allows only numbers (including multiple numbers e.g 1,2).\n   * This module is going to translate the month names, week day names and ranges\n   * to integers relatives.\n   *\n   * Month names example:\n   *  - expression 0 1 1 January,Sep *\n   *  - Will be translated to 0 1 1 1,9 *\n   *\n   * Week day names example:\n   *  - expression 0 1 1 2 Monday,Sat\n   *  - Will be translated to 0 1 1 1,5 *\n   *\n   * Ranges example:\n   *  - expression 1-5 * * * *\n   *  - Will be translated to 1,2,3,4,5 * * * *\n   */\n  function interprete(expression){\n    var expressions = expression.split(' ');\n    expressions = appendSeccondExpression(expressions);\n    expressions[4] = monthNamesConversion(expressions[4]);\n    expressions[5] = weekDayNamesConversion(expressions[5]);\n    expressions = convertAsterisksToRanges(expressions);\n    expressions = convertRanges(expressions);\n    expressions = convertSteps(expressions);\n\n    return expressions.join(' ');\n  }\n  return interprete;\n}());\n","/home/travis/build/npmtest/node-npmtest-node-cron/node_modules/node-cron/src/convert-expression/month-names-conversion.js":"'use strict';\nmodule.exports = (function() {\n  var months = ['january','february','march','april','may','june','july',\n    'august','september','october','november','december'];\n  var shortMonths = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug',\n    'sep', 'oct', 'nov', 'dec'];\n\n  function convertMonthName(expression, items){\n    for(var i = 0; i < items.length; i++){\n      expression = expression.replace(new RegExp(items[i], 'gi'), parseInt(i, 10) + 1);\n    }\n    return expression;\n  }\n\n  function interprete(monthExpression){\n    monthExpression = convertMonthName(monthExpression, months);\n    monthExpression = convertMonthName(monthExpression, shortMonths);\n    return monthExpression;\n  }\n\n  return interprete;\n}());\n","/home/travis/build/npmtest/node-npmtest-node-cron/node_modules/node-cron/src/convert-expression/week-day-names-conversion.js":"'use strict';\nmodule.exports = (function() {\n  var weekDays = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday',\n  'friday', 'saturday'];\n  var shortWeekDays = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat'];\n\n  function convertWeekDays(expression){\n    expression = expression.replace('7', '0');\n    expression = convertWeekDayName(expression, weekDays);\n    return convertWeekDayName(expression, shortWeekDays);\n  }\n\n  function convertWeekDayName(expression, items){\n    for(var i = 0; i < items.length; i++){\n      expression = expression.replace(new RegExp(items[i], 'gi'), parseInt(i, 10));\n    }\n    return expression;\n  }\n\n  return convertWeekDays;\n}());\n","/home/travis/build/npmtest/node-npmtest-node-cron/node_modules/node-cron/src/convert-expression/asterisk-to-range-conversion.js":"'use strict';\nmodule.exports = (function() {\n  function convertAsterisk(expression, replecement){\n    if(expression.indexOf('*') !== -1){\n      return expression.replace('*', replecement);\n    }\n    return expression;\n  }\n\n  function convertAsterisksToRanges(expressions){\n    expressions[0] = convertAsterisk(expressions[0], '0-59');\n    expressions[1] = convertAsterisk(expressions[1], '0-59');\n    expressions[2] = convertAsterisk(expressions[2], '0-23');\n    expressions[3] = convertAsterisk(expressions[3], '1-31');\n    expressions[4] = convertAsterisk(expressions[4], '1-12');\n    expressions[5] = convertAsterisk(expressions[5], '0-6');\n    return expressions;\n  }\n\n  return convertAsterisksToRanges;\n}());\n","/home/travis/build/npmtest/node-npmtest-node-cron/node_modules/node-cron/src/convert-expression/range-conversion.js":"'use strict';\nmodule.exports = (function() {\n  function replaceWithRange(expression, text, init, end) {\n    var numbers = [];\n    var last = parseInt(end);\n    for(var i = parseInt(init); i <= last; i++) {\n      numbers.push(i);\n    }\n    return expression.replace(new RegExp(text, 'gi'), numbers.join());\n  }\n\n  function convertRange(expression){\n    var rangeRegEx = /(\\d+)\\-(\\d+)/;\n    var match = rangeRegEx.exec(expression);\n    while(match !== null && match.length > 0){\n      expression = replaceWithRange(expression, match[0], match[1], match[2]);\n      match = rangeRegEx.exec(expression);\n    }\n    return expression;\n  }\n\n  function convertAllRanges(expressions){\n    for(var i = 0; i < expressions.length; i++){\n      expressions[i] = convertRange(expressions[i]);\n    }\n    return expressions;\n  }\n\n  return convertAllRanges;\n}());\n\n\n\n","/home/travis/build/npmtest/node-npmtest-node-cron/node_modules/node-cron/src/convert-expression/step-values-conversion.js":"'use strict';\n\nmodule.exports = (function() {\n  function convertSteps(expressions){\n    var stepValuePattern = /^(.+)\\/(\\d+)$/;\n    for(var i = 0; i < expressions.length; i++){\n      var match = stepValuePattern.exec(expressions[i]);\n      var isStepValue = match !== null && match.length > 0;\n      if(isStepValue){\n        var values = match[1].split(',');\n        var setpValues = [];\n        var divider = parseInt(match[2], 10);\n        for(var j = 0; j <= values.length; j++){\n          var value = parseInt(values[j], 10);\n          if(value % divider === 0){\n            setpValues.push(value);\n          }\n        }\n        expressions[i] = setpValues.join(',');\n      }\n    }\n    return expressions;\n  }\n\n  return convertSteps;\n}());\n\n","/home/travis/build/npmtest/node-npmtest-node-cron/node_modules/node-cron/src/pattern-validation.js":"'use strict';\n\nvar convertExpression = require('./convert-expression');\n\nmodule.exports = ( function(){\n  function isValidExpression(expression, min, max){\n    var options = expression.split(',');\n    var regexValidation = /^\\d+$|^\\*$|^\\*\\/\\d+$/;\n    for(var i = 0; i < options.length; i++){\n      var option = options[i];\n      var optionAsInt = parseInt(options[i], 10);\n      if(optionAsInt < min || optionAsInt > max || !regexValidation.test(option)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isInvalidSecond(expression){\n    return !isValidExpression(expression, 0, 59);\n  }\n\n  function isInvalidMinute(expression){\n    return !isValidExpression(expression, 0, 59);\n  }\n\n  function isInvalidHour(expression){\n    return !isValidExpression(expression, 0, 23);\n  }\n\n  function isInvalidDayOfMonth(expression){\n    return !isValidExpression(expression, 1, 31);\n  }\n\n  function isInvalidMonth(expression){\n    return !isValidExpression(expression, 1, 12);\n  }\n\n  function isInvalidWeekDay(expression){\n    return !isValidExpression(expression, 0, 7);\n  }\n\n  function validate(pattern){\n    var patterns = pattern.split(' ');\n    var executablePattern = convertExpression(pattern);\n    var executablePatterns = executablePattern.split(' ');\n\n    if(patterns.length === 5){\n      patterns = ['0'].concat(patterns);\n    }\n\n    if (isInvalidSecond(executablePatterns[0])) {\n      throw patterns[0] + ' is a invalid expression for second';\n    }\n\n    if (isInvalidMinute(executablePatterns[1])) {\n      throw patterns[1] + ' is a invalid expression for minute';\n    }\n\n    if (isInvalidHour(executablePatterns[2])) {\n      throw patterns[2] + ' is a invalid expression for hour';\n    }\n\n    if (isInvalidDayOfMonth(executablePatterns[3])) {\n      throw patterns[3] + ' is a invalid expression for day of month';\n    }\n\n    if (isInvalidMonth(executablePatterns[4])) {\n      throw patterns[4] + ' is a invalid expression for month';\n    }\n\n    if (isInvalidWeekDay(executablePatterns[5])) {\n      throw patterns[5] + ' is a invalid expression for week day';\n    }\n  }\n\n  return validate;\n}());\n","/home/travis/build/npmtest/node-npmtest-node-cron/node_modules/node-cron/src/scheduled-task.js":"'use strict';\n\nmodule.exports = (function() {\n\n  /**\n   * Creates a new scheduled task.\n   *\n   * @param {Task} task - task to schedule.\n   * @param {boolean} immediateStart - whether to start the task immediately.\n   */\n  function ScheduledTask(task, immediateStart) {\n    this.task = function() {\n      task.update(new Date());\n    };\n\n    this.tick = null;\n\n    if (immediateStart !== false) {\n      this.start();\n    }\n  }\n\n  /**\n   * Starts updating the task.\n   *\n   * @returns {ScheduledTask} instance of this task.\n   */\n  ScheduledTask.prototype.start = function() {\n    if (this.task && !this.tick) {\n      this.tick = setInterval(this.task, 1000);\n    }\n\n    return this;\n  };\n\n  /**\n   * Stops updating the task.\n   *\n   * @returns {ScheduledTask} instance of this task.\n   */\n  ScheduledTask.prototype.stop = function() {\n    if (this.tick) {\n      clearInterval(this.tick);\n      this.tick = null;\n    }\n\n    return this;\n  };\n\n  /**\n   * Destoys the scheduled task.\n   */\n  ScheduledTask.prototype.destroy = function() {\n    this.stop();\n\n    this.task = null;\n  };\n\n  return ScheduledTask;\n}());\n"}